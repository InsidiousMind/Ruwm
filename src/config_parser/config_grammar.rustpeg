use super::*;
#![arguments(variables: &mut super::Variables )]

// as many spaces as we want, ended with a line-break
end ->  () 
    = [ \n]*

// Symbol/Action definitions
symbol -> String
    = s:$([a-zA-Z0-9'":]+) { s.to_string() }

symbols -> Vec<String>
    = (variable / symbol) ++ "+"

variable -> String
    = s:$("$"[a-zA-Z0-9]+) { s.to_string() }

variables -> Vec<String>
    = variable ++ [+ ]

get_variable -> Vec<String>
    = v:variable { variables.get(&v) }

get_single_s_from_var -> String
    = v:variable { variables.get_single(&v) }

// Action going to have to go down it's own syntax tree
// EX: if an action is to be "exec"

action -> super::Action
    = ( exec / workspace / focus )

comment -> super::Config
    = "#" [^\n]* e:end { super::Config::Comment() }

dead_space -> super::Config
    = [ ]+ e:end { super::Config::DeadSpace() }

// keyword definitions
bindsym -> ()
    = "bindsym"i

floating_mod -> ()
    = "floating_mod"i

set -> ()
    = "set"i

// Action Definitions
exec_option -> String
    = o:$( ([-] [a-zA-Z]+) / ([--] [a-zA-Z\-]+)) { o.to_string() }

exec_options -> Vec<String>
    = exec_option ** " "

// should split action arguments into vec
// so that when spawning process, can do it without additional parsing
exec -> super::Action
    = "exec " o:(exec_options)? " "* ['"]a:$([a-zA-Z0-9\-$.\/ ]*)['"] { super::Action::Exec(o, a.to_string()) }

workspace -> super::Action
    = "workspace " w:$(get_single_s_from_var / [0-9]*<1>) { super::Action::Workspace(w.to_string()) }

// d for direction
focus -> super::Action
    = "focus " d:$([a-z]*<2,5>) { super::Action::Focus(d.to_string())}

// Combination Definitions

/* BindSym, all we care about is what symbols 
 * are associated with which actions
 */
bindsym_combo -> super::Config
    = k:bindsym " " s:(symbols) " " a:action e:end { super::Config::BindSym(s,a) }

floating_mod_combo -> super::Config
    = k:floating_mod " " s:symbol e:end { super::Config::FloatingMod(s) }

set_combo -> super::Config
    = k:set " " v:variable " " s:symbols e:end { variables.set(v, s) }

exec_combo -> super::Config 
    = k:exec e:end { super::Config::Exec(k) }

// Element Definitions
#[pub]
content -> Vec<super::Config>
    = c:( comment / #quiet<dead_space> / bindsym_combo / floating_mod_combo / set_combo / exec_combo )* {c}
